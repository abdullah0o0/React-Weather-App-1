{"version":3,"sources":["App.js","WeatherDataComponent.js","index.js"],"names":["console","log","process","App","state","cityName","weatherData","getUserCity","e","setState","target","value","formSubmission","preventDefault","trim","fetchWeatherData","city","fetch","then","response","json","data","catch","err","this","onSubmit","type","placeholder","onChange","temp","main","maxTemp","temp_max","minTemp","temp_min","humidity","feelsLike","feels_like","icon","weather","Component","WeatherDataComponent","nextProps","nextState","props","src","alt","pressure","reactDOM","render","document","getElementById"],"mappings":"gNAEAA,QAAQC,IAAIC,G,IACSC,E,4MACnBC,MAAQ,CACNC,SAAU,GACVC,YAAa,M,EAEfC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZJ,SAAUG,EAAEE,OAAOC,S,EAGvBC,eAAiB,SAACJ,GAEhBA,EAAEK,iBACFb,QAAQC,IAAI,kBACZD,QAAQC,IAAI,EAAKG,MAAMC,UACW,KAA/B,EAAKD,MAAMC,SAASS,QACrB,EAAKC,iBAAiB,EAAKX,MAAMC,W,EAIrCU,iBAAmB,SAACC,GAElBC,MAAM,6DAAD,OAEDD,EAFC,kBAEad,mCAFb,kBAIFgB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKZ,SAAS,CAAEH,YAAae,OAC5CC,OAAM,SAAAC,GAAG,OAAEvB,QAAQC,IAAIsB,O,uDAE5B,WAEEC,KAAKT,iBAAiB,Y,oBAExB,WACEf,QAAQC,IAAIC,oCACZ,IAAImB,EAAOG,KAAKpB,MAAME,YAEtB,OADAN,QAAQC,IAAIuB,KAAKpB,MAAME,aAErB,6BACE,2CACA,0BAAMmB,SAAUD,KAAKZ,gBACnB,2BACEc,KAAK,OACLC,YAAY,uBACZC,SAAUJ,KAAKjB,cAEjB,qDAEDc,GACA,kBAAC,IAAD,CACAL,KAAMQ,KAAKpB,MAAMC,SACjBwB,KAAMR,EAAKS,KAAKD,KAChBE,QAASV,EAAKS,KAAKE,SACnBC,QAASZ,EAAKS,KAAKI,SACnBC,SAAUd,EAAKS,KAAKK,SACpBC,UAAWf,EAAKS,KAAKO,WACrBC,KAAMjB,EAAKkB,QAAQ,GAAGD,Y,GAzDEE,e,iICDZC,E,2KACjB,SAAsBC,EAAUC,GAE5B,OAAGD,EAAUb,OAAOL,KAAKoB,MAAMf,MAAQa,EAAU1B,OAAOQ,KAAKoB,MAAM5B,O,oBAKvE,WAEI,OADAhB,QAAQC,IAAI,gCAER,6BACI,yCAAeuB,KAAKoB,MAAMR,UAA1B,KACA,2BAAIZ,KAAKoB,MAAM5B,MACf,yBAAK6B,IAAG,2CAAsCrB,KAAKoB,MAAMN,KAAjD,WAAgEQ,IAAI,KAC5E,6BACI,4BAAKtB,KAAKoB,MAAMf,OAEpB,6BACI,2BAAIL,KAAKoB,MAAMT,UACf,2BAAIX,KAAKoB,MAAMG,UACf,2BAAIvB,KAAKoB,MAAMb,SACf,2BAAIP,KAAKoB,MAAMX,e,GAtBeO,c,+DCDlD,gDAIAQ,EAASC,OAAO,kBAAC,IAAD,MAAOC,SAASC,eAAe,W","file":"static/js/main.c01b30ae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport WeatherDataComponent from \"./WeatherDataComponent\";\nconsole.log(process)\nexport default class App extends Component {\n  state = {\n    cityName: \"\",\n    weatherData: null,\n  };\n  getUserCity = (e) => {\n    this.setState({\n      cityName: e.target.value,\n    });\n  };\n  formSubmission = (e) => {\n    //prevent default behaviour of form\n    e.preventDefault();\n    console.log(\"form submitted\");\n    console.log(this.state.cityName);\n    if(this.state.cityName.trim() !== \"\"){\n      this.fetchWeatherData(this.state.cityName);\n    }\n    \n  };\n  fetchWeatherData = (city) => {\n    //fetching Weather information from openWeathermap api\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=\n      ${city}&appid=${process.env.REACT_APP_API_KEY}&units=metric`\n    )\n      .then((response) => response.json())\n      .then((data) => this.setState({ weatherData: data }))\n      .catch(err=>console.log(err))\n  };\n  componentDidMount(){\n    //onload\n    this.fetchWeatherData(\"berlin\")\n  }\n  render() {\n    console.log(process.env.REACT_APP_API_KEY)\n    let data = this.state.weatherData\n    console.log(this.state.weatherData)\n    return (\n      <div>\n        <h1>Weather App</h1>\n        <form onSubmit={this.formSubmission}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your City Name\"\n            onChange={this.getUserCity}\n          />\n          <button>Get Weather Data</button>\n        </form>\n        {data && \n         <WeatherDataComponent\n         city={this.state.cityName}\n         temp={data.main.temp}\n         maxTemp={data.main.temp_max}\n         minTemp={data.main.temp_min}\n         humidity={data.main.humidity}\n         feelsLike={data.main.feels_like}\n         icon={data.weather[0].icon}\n       />}\n       \n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react'\r\n\r\nexport default class WeatherDataComponent extends Component{\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        //rerender function\r\n        if(nextProps.temp===this.props.temp && nextProps.city===this.props.city){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    render(){\r\n        console.log(\"render from weatherComponent\")\r\n        return(\r\n            <div>\r\n                <p>Feels like {this.props.feelsLike} </p>\r\n                <p>{this.props.city}</p>\r\n                <img src={`http://openweathermap.org/img/wn/${this.props.icon}@4x.png`} alt=\"\"/>\r\n                <div>\r\n                    <h1>{this.props.temp}</h1>\r\n                </div>\r\n                <div>\r\n                    <p>{this.props.humidity}</p>\r\n                    <p>{this.props.pressure}</p>\r\n                    <p>{this.props.maxTemp}</p>\r\n                    <p>{this.props.minTemp}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\nimport React from \"react\"\nimport App from \"./App.js\"\nimport reactDOM from \"react-dom\"\n\nreactDOM.render(<App/>,document.getElementById(\"root\"))"],"sourceRoot":""}